---
title: "STAT 331 Portfolio"
author: "Isabel Villafuerte"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be a B+.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv
# Importing teacher_evals csv file from Lab 3 Question 2
teacher_evals <- read_csv(here::here("data", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
#Practice Activity 4: Government Spending
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip  = 7, 
                      n_max = 191, 
                      na = c(". .")
                      )
```

-   `txt`

```{r}
#| label: wd-1-txt

```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2
#Lab 3 Question 5 (Edit: Added `:` in the select() to shorten the amount of text)
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(teacher_id = as.character(teacher_id)) |>
  select(course_id:sex)
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric
#Lab 3 Question 5 (Edit: Added `:` in the select() to shorten the amount of text)
teacher_evals_clean <- teacher_evals |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(teacher_id = as.character(teacher_id)) |>
  select(course_id:sex)
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
#Lab 5 Witness Interviews (Edit: included both interviews in one pipeline)
person |>
  filter((address_street_name == "Northwestern Dr" &
         address_number == max(address_number)) | #The first witness is Morty Schapiro
  address_street_name == "Franklin Ave" &
         str_detect(name, 
                    "^Annabel")) |>  #The second witness is Annabel Miller
  left_join(interview,
            by = join_by(id == person_id))
```

-   factor

```{r}
#| label: wd-3-factor
#Lab 4 Question 2
ca_childcare <- counties |>
  filter(state_abbreviation == "CA") |>
  inner_join(childcare_costs,
             by = join_by(county_fips_code == county_fips_code))
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
#Lab 5 Finding the final suspect (Edit: Created a time interval from the ymd() in lubridate. Added extra filter step to only include individuals that had attended the concert 3 times. Also, changed to inner joins and left joins.)

facebook_event_checkin |>
 
   #Filtering all the SQL Symphony event checkins during December of 2017.
  mutate(date = ymd(date)) |>
  filter(event_name == "SQL Symphony Concert",  
         date %in% ymd("20171201":"20171231")) |>
  
  #Filtering out the amount of people that attended the concert ONLY 3 times during the time interval.
  count(person_id) |> 
  filter(n == 3) |> 
  
  #Joining the Facebook dataframe to person and drivers license dataframes to access the suspects personal info.
  inner_join(person,
            by = join_by(person_id == id)) |>
  inner_join(drivers_license,
            by = join_by(license_id == id)) |> 
  
  #Identifying the final suspect with the description provided by Jeremy Bowers.
  filter(hair_color == "red",
         car_make == "Tesla",
         car_model == "Model S") |>
  left_join(interview,
             by = join_by(person_id == person_id)) 
#Miranda did not provide a statement, suspicious.
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric
#Challenge 3 Question 1
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(SET_level = if_else(SET_score_avg >= 4,
                             "excellent",
                             "standard"),
         sen_level = if_else(seniority <= 4,
                             "junior",
                             "senior")) |>
  select(course_id, 
         SET_level,
         sen_level)
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor
#Lab 4 Question 6 (Edit: Changed the color palette of my plot)
colors <- colorRampPalette(brewer.pal(8, "Accent"))(10)

ca_childcare |>
  filter(study_year >= 2008) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_demo",
               values_to = "median_weekly_price") |>
  mutate(age_demo = fct_recode(age_demo,
                               "Infant" = "mc_infant",
                               "Toddler" = "mc_toddler",
                               "Preschool" = "mc_preschool"),
         age_demo = fct_relevel(age_demo,
                                 "Infant",
                                 "Toddler",
                                 "Preschool")
         ) |> 
ggplot(mapping = aes (x = study_year,
                        y = median_weekly_price,
                      color = fct_reorder2(.f = region,
                                           .x = study_year,
                                           .y = median_weekly_price))) +
  geom_point() +
  geom_smooth(method = "loess",
              se = TRUE) +
  facet_wrap(~age_demo) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colors) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  guides(x = guide_axis(n.dodge = 2)) +
  theme_bw() +
  scale_y_continuous(limits = c(0,
                                500),
                     labels = scales::label_dollar())
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
#Lab 5 Crime Scene Report (Edit: Converted date to a date-time variable)
crime_scene_report |>
  mutate(date = ymd(date)) |>
  filter(city == "SQL City",
         date == ymd(20180115),
         type == "murder")
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left
#Lab 5 Witness Interviews (Edit: included both interviews in one pipeline)
person |>
  filter((address_street_name == "Northwestern Dr" &
         address_number == max(address_number)) | #The first witness is Morty Schapiro
  address_street_name == "Franklin Ave" &
         str_detect(name, 
                    "^Annabel")) |>  #The second witness is Annabel Miller
  left_join(interview,
            by = join_by(id == person_id))
```

-   `right_join()`

```{r}
#| label: wd-5-right
#Lab 5 Potential Suspects (Edit: Included an extra filter step to include the info provided by Morty.)
get_fit_now_check_in |> #Looking for the killer that Morty saw carrying a gym bag and Annabel identified at the gym on January 9, 2018.
  right_join(get_fit_now_member,
            by = join_by(membership_id == id)) |> #Joining check-in and membership data sets.
  right_join(interview,
            by = join_by(person_id == person_id)) |> #Checking the interviews to find potential suspects.
  filter(check_in_date == "20180109",
         str_detect(membership_id,
                    "^48Z")) #Only looking for interviews for those that checked in on Jan 9, 2018 and a membership number starting with 48Z. Jeremy Bowers is a potential suspect.
```

-   `inner_join()`

```{r}
#| label: wd-5-inner
#Lab 4 Question 2
ca_childcare <- counties |>
  filter(state_abbreviation == "CA") |>
  inner_join(childcare_costs,
             by = join_by(county_fips_code == county_fips_code))
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
#Lab 4 Question 4. (Edit: Created a dataframe to only include study year's 2008 and 2018. Then I used a semi_join to join ca_childcare and the new dataframe (study_year_df) to filter out the unwanted years).

study_year_df <- tibble(study_year = c(2008,
                                    2018))
#Semi_join will filter out rows that do not match with the new dataframe.
ca_childcare |>
  semi_join(study_year_df, by = "study_year") |>
  group_by(study_year,
           region) |>
  summarise(median_hi = median(mhi_2018),
            .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_hi, 
              names_prefix = "income_") |>
  arrange(income_2018)
```

-   `anti_join()`

```{r}
#| label: wd-6-anti
#Lab 4 Question 4 (Edit: Created a dataframe of all the study years EXCEPT 2008 and 2018. Then, I used an anti_join to join ca_childcare and the new dataframe (study_year_df2). Since there were no matches for study years 2008 and 2018, the output only showed information for those two years).

study_year_df2 <- tibble(study_year = c(2009:2017))
#Anti_join will filter out rows of data that match with the new dataframe.
ca_childcare |>
  anti_join(study_year_df2, by = "study_year") |>
  group_by(study_year,
           region) |>
  summarise(median_hi = median(mhi_2018),
            .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_hi, 
              names_prefix = "income_") |>
  arrange(income_2018)
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
#Lab 4 Question 6 (Edit: Changed the color palette of my plot)
colors <- colorRampPalette(brewer.pal(8, "Accent"))(10)

ca_childcare |>
  filter(study_year >= 2008) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_demo",
               values_to = "median_weekly_price") |>
  mutate(age_demo = fct_recode(age_demo,
                               "Infant" = "mc_infant",
                               "Toddler" = "mc_toddler",
                               "Preschool" = "mc_preschool"),
         age_demo = fct_relevel(age_demo,
                                 "Infant",
                                 "Toddler",
                                 "Preschool")
         ) |> 
ggplot(mapping = aes (x = study_year,
                        y = median_weekly_price,
                      color = fct_reorder2(.f = region,
                                           .x = study_year,
                                           .y = median_weekly_price))) +
  geom_point() +
  geom_smooth(method = "loess",
              se = TRUE) +
  facet_wrap(~age_demo) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colors) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  guides(x = guide_axis(n.dodge = 2)) +
  theme_bw() +
  scale_y_continuous(limits = c(0,
                                500),
                     labels = scales::label_dollar())
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
#Lab 4 Question 4. (Edit: Created a dataframe to only include study year's 2008 and 2018. Then included a semi_join to filter the unwanted years)

study_year_df <- tibble(study_year = c(2008,
                                    2018))

ca_childcare |>
  semi_join(study_year_df, by = "study_year") |>
  group_by(study_year,
           region) |>
  summarise(median_hi = median(mhi_2018),
            .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_hi, 
              names_prefix = "income_") |>
  arrange(income_2018)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
#Challenge 2 Exploring Boxplot Color Themes
ggplot(data = surveys, 
       mapping = aes(x = weight, 
                     y = species, 
                     color = genus)) +
  geom_boxplot() +
  scale_color_manual(values = cdPalette_blk) +
  labs(x = "Weight (g)", 
       y = "", 
       title = "Weight Distributions Across Rodents",
       subtitle = "Species", 
       legend = "Genus")
 
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
#Lab 4 Question 6 (Edit: Changed the color palette of my plot)
colors <- colorRampPalette(brewer.pal(8, "Accent"))(10)

ca_childcare |>
  filter(study_year >= 2008) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_demo",
               values_to = "median_weekly_price") |>
  mutate(age_demo = fct_recode(age_demo,
                               "Infant" = "mc_infant",
                               "Toddler" = "mc_toddler",
                               "Preschool" = "mc_preschool"),
         age_demo = fct_relevel(age_demo,
                                 "Infant",
                                 "Toddler",
                                 "Preschool")
         ) |> 
ggplot(mapping = aes (x = study_year,
                        y = median_weekly_price,
                      color = fct_reorder2(.f = region,
                                           .x = study_year,
                                           .y = median_weekly_price))) +
  geom_point() +
  geom_smooth(method = "loess",
              se = TRUE) +
  facet_wrap(~age_demo) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colors) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  guides(x = guide_axis(n.dodge = 2)) +
  theme_bw() +
  scale_y_continuous(limits = c(0,
                                500),
                     labels = scales::label_dollar())
```

-   Example of function formatting

```{r}
#| label: r-2-3
#Lab 9 Question 1 (Edit: Changed the randomBabies function argument from .x to 4 instead because we want to simulate the 4 babies that are correctly returned within the 10,000 simulations).
randomBabies <- function(nBabies = 4){
  baby_data <- tibble(baby = 1:nBabies,
                      returned_babies = sample (1:nBabies,
                                                size = nBabies,
                                                replace = FALSE)
                      )
    correct_returns <- baby_data |>
      mutate(correct_baby = ifelse(baby == returned_babies,
                                   TRUE,
                                   FALSE)) |>
      summarise(n_correct_babies = sum(correct_baby)) |> 
      pull(n_correct_babies)
    
    return(correct_returns)
    
}

results <- map_int(.x = 1:10000,
                   .f = ~randomBabies(4)
                   )
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example
#Lab 4 Question 5
ca_childcare |>
  filter(study_year == 2018) |>
  group_by(region) |>
  summarize(median_weekly_price = median(mc_infant)) |>
  slice_min(median_weekly_price,
            n=1)
```

-   Example of function stops

```{r}
#| label: r-3-function-stops
#Challenge 7 Question 2
NA_input <- function(x, min, max) {
  x <- case_when(x < min ~ NA,
                 x > max ~ NA,
                 .default = x)
    if(!is.numeric(x)) {
      stop("Please provide a numeric input for the x argument.")
    }
  return(x)
}
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num
#Lab 2 Question 8 (Edit: Decreased alpha value within `geom_point`)
ggplot(data = surveys,
       mapping = aes(x = weight, 
                     y = hindfoot_length)) +
  geom_point(alpha = 0.25) +
  facet_wrap("species") +
  labs(x =  "Weight (g)",
       y = "",
       title = "Rodent Species: Variation in Hindfoot Length and Weight",
       subtitle = "Hindfoot length (mm)")
```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
#Challenge 2 Changing boxplot colors with `RColorBrewer` Package. (Edit: Included a color palette within `scale_colour_brewer()`)
ggplot(data = surveys, 
       mapping = aes(x = weight, 
                     y = species, 
                     color = genus)) +
  geom_boxplot() +
  scale_colour_brewer(palette = "Dark2") +
  labs(x = "Weight (g)",
       y = "",
       title = "Weight Distributions across Rodents",
       subtitle = "Species", 
       legend = "Genus")
```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat
#Challenge 3 Bar plot showing seniority and SET level.
ggplot(data = teacher_evals_compare,
       mapping = aes(x = sen_level,#Mapping seniority on x-axis
                     fill = SET_level) #Mapping SET_level with color
       ) +
  geom_bar(stat = "count",
           position = "stack") + #Stack SET_level on x-axis
  scale_fill_manual(values = c("steelblue", 
                                "orange3"),
                               name = "SET Level", #Changing the name of legend
                    ) +
  labs(x = "Seniority of Instructor",
       y = "",
       title = "Number of Sections") +
  theme_bw() #White background with grid lines
```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date
#Lab 4 Question 6 (Edit: Changed the color palette of my plot)
colors <- colorRampPalette(brewer.pal(8, "Accent"))(10)

ca_childcare |>
  filter(study_year >= 2008) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_demo",
               values_to = "median_weekly_price") |>
  mutate(age_demo = fct_recode(age_demo,
                               "Infant" = "mc_infant",
                               "Toddler" = "mc_toddler",
                               "Preschool" = "mc_preschool"),
         age_demo = fct_relevel(age_demo,
                                 "Infant",
                                 "Toddler",
                                 "Preschool")
         ) |> 
ggplot(mapping = aes (x = study_year,
                        y = median_weekly_price,
                      color = fct_reorder2(.f = region,
                                           .x = study_year,
                                           .y = median_weekly_price))) +
  geom_point() +
  geom_smooth(method = "loess",
              se = TRUE) +
  facet_wrap(~age_demo) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colors) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  guides(x = guide_axis(n.dodge = 2)) +
  theme_bw() +
  scale_y_continuous(limits = c(0,
                                500),
                     labels = scales::label_dollar())
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1
#Lab 2 Question 8 (Edit: Decreased alpha value within `geom_point`)
ggplot(data = surveys,
       mapping = aes(x = weight, 
                     y = hindfoot_length)) +
  geom_point(alpha = 0.25) +
  facet_wrap("species") +
  labs(x =  "Weight (g)",
       y = "",
       title = "Rodent Species: Variation in Hindfoot Length and Weight",
       subtitle = "Hindfoot length (mm)")
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2
#Lab 2 Question 13 (Edit: Decreased alpha to make the points more transparent allowing the boxplots to be seen. I also removed the tilting on the y-axis)
ggplot(data = surveys,
       mapping = aes(x = species,
                     y = weight)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(color = "orange3", 
              alpha = 0.035) +
  labs(x = "Species",
       y = "",
       title = "Weight Distributions Across Rodent Species",
       subtitle = "Weight (g)")
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3
#Lab 4 Question 6 (Edit: Changed the color palette of my plot)
colors <- colorRampPalette(brewer.pal(8, "Accent"))(10)

ca_childcare |>
  filter(study_year >= 2008) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_demo",
               values_to = "median_weekly_price") |>
  mutate(age_demo = fct_recode(age_demo,
                               "Infant" = "mc_infant",
                               "Toddler" = "mc_toddler",
                               "Preschool" = "mc_preschool"),
         age_demo = fct_relevel(age_demo,
                                 "Infant",
                                 "Toddler",
                                 "Preschool")
         ) |> 
ggplot(mapping = aes (x = study_year,
                        y = median_weekly_price,
                      color = fct_reorder2(.f = region,
                                           .x = study_year,
                                           .y = median_weekly_price))) +
  geom_point() +
  geom_smooth(method = "loess",
              se = TRUE) +
  facet_wrap(~age_demo) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colors) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  guides(x = guide_axis(n.dodge = 2)) +
  theme_bw() +
  scale_y_continuous(limits = c(0,
                                500),
                     labels = scales::label_dollar())
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1
#Lab 4 Question 6 (Edit: Changed the color palette of my plot)
colors <- colorRampPalette(brewer.pal(8, "Accent"))(10)

ca_childcare |>
  filter(study_year >= 2008) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_demo",
               values_to = "median_weekly_price") |>
  mutate(age_demo = fct_recode(age_demo,
                               "Infant" = "mc_infant",
                               "Toddler" = "mc_toddler",
                               "Preschool" = "mc_preschool"),
         age_demo = fct_relevel(age_demo,
                                 "Infant",
                                 "Toddler",
                                 "Preschool")
         ) |> 
ggplot(mapping = aes (x = study_year,
                        y = median_weekly_price,
                      color = fct_reorder2(.f = region,
                                           .x = study_year,
                                           .y = median_weekly_price))) +
  geom_point() +
  geom_smooth(method = "loess",
              se = TRUE) +
  facet_wrap(~age_demo) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colors) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  guides(x = guide_axis(n.dodge = 2)) +
  theme_bw() +
  scale_y_continuous(limits = c(0,
                                500),
                     labels = scales::label_dollar())
```

-   I can use annotations

```{r}
#| label: dvs-3-2
#Challenge 2 Exploring annotations (Edit: Used ChatGPT to reduce the number of times I used `annotate()`. https://chatgpt.com/share/6727f7b3-defc-8007-aa51-570c9c2a9c8b)

#Dataframe for genus annotations
genus_annotations <- data.frame(
  x = rep(250, 14),
  y = 1:14,
  label = c("Neotoma", "Chaetodipus", "Peromyscus", "Perognathus", "Reithrodontomys", 
            "Sigmodon", "Onychomys", "Peromyscus", "Reithrodontomys", "Dipodomys", 
            "Dipodomys", "Chaetodipus", "Dipodomys", "Onychomys"))

ggplot(data = surveys, 
       mapping = aes(x = weight, 
                     y = species, 
                     color = genus)) +
  geom_boxplot() +
  scale_color_manual(values = cdPalette_blk) +
  geom_text(data = genus_annotations, #Using `geom_text` to incorporate dataframe for genus annotations
            aes(x = x,
                y = y, 
                label = label),
            inherit.aes = FALSE) + #Argument used to ignore aesthetics within ggplot().
  theme(legend.position = "none") +
  labs(x = "Weight (g)", 
       y = "", 
       title = "Weight Distributions Across Rodents",
       subtitle = "Species", 
       legend = "Genus")
```

-   I can be creative...

```{r}
#| label: dvs-3-3
#Challenge 7 Question 4 (Edit:To reduce the amount of noise in my plot I had to remove condition indices that were less than 10.)

fish_health |>
  filter(condition_index < 10) |>
ggplot(mapping = aes(x = year, 
                     y = condition_index, 
                     color = species)) +
  geom_jitter(width = 0.2,
              height = 0,
              alpha = 0.5) +
  geom_smooth(method = "loess", se = FALSE, size = 1) +
  scale_color_brewer(palette = "Paired") +
  facet_wrap(~ species) +
  labs(x = "Year",
       y = "",
       color = "Species",
       title = "Fish Condition Indices Throughout the Study") +
  theme_minimal() +
  theme(legend.position = "none")
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
#Lab 3 Question 10 (Edit: Made the max and min ratings fit in one pipeline.)
# Instructors with the highest average rating for question 1
teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  #Calculating the average rating for each instructor across all their courses
  summarize(average_rating = mean(SET_score_avg,
                                  na.rm = TRUE),
            .groups = "drop") |>
  #Instructors with the highest rating
  filter(average_rating == max(average_rating) | average_rating == min(average_rating)) |>
  arrange(average_rating)
```

-   Example using `across()`

```{r}
#| label: dvs-4-across
#Lab 3 Question 7
#Group together teacher-course columns
teacher_evals_clean |>
  group_by(teacher_id,
           course_id) |>
  # Summing up all of the NAs across variables
  summarize(
    across(.cols = question_no:sex,
           .fns = ~ sum(is.na(.x))
           ), .groups = "drop"
  ) |>
  # Filtering out all of the NAs
  filter(
    if_any(.cols = question_no:sex,
           .fns = ~ .x != 0)
  )
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
#Lab 4 Question 4. (Edit: Created a dataframe to only include study year's 2008 and 2018. Then included a semi_join to filter the unwanted years)

study_year_df <- tibble(study_year = c(2008,
                                    2018))

ca_childcare |>
  semi_join(study_year_df, by = "study_year") |>
  group_by(study_year,
           region) |>
  summarise(median_hi = median(mhi_2018),
            .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_hi, 
              names_prefix = "income_") |>
  arrange(income_2018)
```

-   Example 2

```{r}
#| label: dvs-5-2
#Lab 4 Question 5
ca_childcare |>
  filter(study_year == 2018) |>
  group_by(region) |>
  summarize(median_weekly_price = median(mc_infant)) |>
  slice_min(median_weekly_price,
            n=1)
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1
#Lab 8 Question 3

evals |>
  distinct(teacher_id, 
           .keep_all = TRUE) |>
  mutate(sen_level = if_else(seniority <= 4,
                             "Junior (4 years or less)",
                             "Senior (more than 4 years)")) |>
  pivot_longer(cols = c(academic_degree,
                        sen_level,
                        sex),
               names_to = "category",
               values_to = "value") |>
  count(value) |>
  pivot_wider(names_from = value,
              values_from = n,
              values_fill = list(n = 0)) |>
  select(Female = female,
         Male = male,
         `Junior (4 years or less)`,
         `Senior (more than 4 years)`,
         `No Degree` = no_dgr,
         Masters = ma,
         Doctorate = dr,
         Professor = prof) |>
  kable(format = "html",
        align = "c") |>
  kable_styling(bootstrap_options = c("striped",
                "bordered",
                "hover",
                "basic"))
```

-   Example 2

```{r}
#| label: dvs-6-2
#Lab 8 Question 4 (Edit: Rather than using the t() to transpose my data, I switched to a pivot wider).

map_missing_values <- function(df) {
  missing_val <- map_int (df, ~ sum(is.na(.)))
  return(missing_val)
}

missing_values <- map_missing_values(fish)

enframe(missing_values, name = "Variable", value = "Missing Values") |>
  pivot_wider(names_from = Variable, values_from = `Missing Values`) |>
  kable(format = "html", caption = "Missing Values of Fish Weight") |> 
  kable_styling(full_width = TRUE, 
                position = "center",
                bootstrap_options = c("striped",
                "bordered",
                "hover"))
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1
#Lab 8 Question 4 (Edit: Used functions form the gt package to reformat and include cell borders to the table).
map_missing_values <- function(df) {
  missing_val <- map_int (df, ~ sum(is.na(.)))
  return(missing_val)
}

missing_values <- map_missing_values(fish)

enframe(missing_values, name = "Variable", 
        value = "Missing Values") |>
  gt() |>
  tab_header (title = "Missing Values of Fish Weight") |>
  cols_label(Variable = "Variable",
             `Missing Values` = "Count of Missing Values") |>
  fmt_number(columns = `Missing Values`,
             decimals = 0) |>
  tab_options(table.width = px(800),
              table.align = "center") |>
  tab_style(style = cell_borders(sides = c("top", 
                                           "bottom"),
      color = "gray",
      weight = px(1)),
      locations = cells_body())
```

-   Example 2

```{r}
#| label: dvs-7-2
#Lab 8 Question 1 (Edit: Used functions form the gt package to reformat and include cell borders to the table).

map_data_types <- function(df) {
  typ <- map_chr (df, class)
  return(typ)
}
data_types <- map_data_types(surveys)

enframe(data_types, name = "Variable", value = "Data Type") |>
  gt() |>
  tab_header(title = "Data Types of Surveys") |>
  cols_label(Variable = "Variable",
             `Data Type` = "Data Type") |>
  tab_options(table.width = px(800),
              table.align = "center") |>
  tab_style(style = cell_borders(sides = c("top", "bottom"),
                                 color = "lightgrey",
                                 weight = px(1)),
            locations = cells_body())
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
# Challenge 3 Question 1
teacher_evals_compare <- teacher_evals |>
  filter(question_no == 903) |>
  mutate(SET_level = if_else(SET_score_avg >= 4,
                             "excellent",
                             "standard"),
         sen_level = if_else(seniority <= 4,
                             "junior",
                             "senior")) |>
  select(course_id, 
         SET_level,
         sen_level)
```

-   `across()`

```{r}
#| label: pe-1-across
#Lab 3 Question 7
#Group together teacher-course columns
teacher_evals_clean |>
  group_by(teacher_id,
           course_id) |>
  # Summing up all of the NAs across variables
  summarize(
    across(.cols = question_no:sex,
           .fns = ~ sum(is.na(.x))
           ), .groups = "drop"
  ) |>
  # Filtering out all of the NAs
  filter(
    if_any(.cols = question_no:sex,
           .fns = ~ .x != 0)
  )
```

-   `map()` functions

```{r}
#| label: pe-1-map-1
#Lab 8 Question 2
evals |>
  map_at(.at = c("teacher_id",
                   "weekday",
                   "academic_degree",
                   "seniority",
                   "sex"),
                   .f = ~as.factor(.x)) |>
  bind_cols()
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1
#Lab 9 Question 1 (Edit: Changed the randomBabies function argument from .x to 4 instead because we want to simulate the 4 babies that are correctly returned within the 10,000 simulations).
randomBabies <- function(nBabies = 4){
  baby_data <- tibble(baby = 1:nBabies,
                      returned_babies = sample(1:nBabies,
                                               size = nBabies,
                                               replace = FALSE)
                      )
    correct_returns <- baby_data |>
      mutate(correct_baby = ifelse(baby == returned_babies,
                                   TRUE,
                                   FALSE)) |>
      summarise(n_correct_babies = sum(correct_baby)) |> 
      pull(n_correct_babies)
    
    return(correct_returns)
    
}

results <- map_int(.x = 1:10000,
                   .f = ~randomBabies(4)
                   )
```

-   Function that operates on data frames

```{r}
#| label: pe-2-2
#Lab 8 question 1
map_data_types <- function(df) {
  typ <- map_chr (df, class)
  return(typ)
}
data_types <- map_data_types(surveys)

enframe(data_types, name = "Variable", value = "Data Type") |>
  pivot_wider(names_from = Variable, values_from = `Data Type`) |>
  kable(format = "html", caption = "Data Types of Surveys") |> 
  kable_styling(full_width = TRUE, 
                position = "center",
                bootstrap_options = c("striped",
                "bordered",
                "hover"))
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across
#Lab 3 Question 7
#Group together teacher-course columns
teacher_evals_clean |>
  group_by(teacher_id,
           course_id) |>
  # Summing up all of the NAs across variables
  summarize(
    across(.cols = question_no:sex,
           .fns = ~ sum(is.na(.x))
           ), .groups = "drop"
  ) |>
  # Filtering out all of the NAs
  filter(
    if_any(.cols = question_no:sex,
           .fns = ~ .x != 0)
  )
```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1
#Lab 9 Question 1 (Edit: Changed the randomBabies function argument from .x to 4 instead because we want to simulate the 4 babies that are correctly returned within the 10,000 simulations).
randomBabies <- function(nBabies = 4){
  baby_data <- tibble(baby = 1:nBabies,
                      returned_babies = sample (1:nBabies,
                                                size = nBabies,
                                                replace = FALSE)
                      )
    correct_returns <- baby_data |>
      mutate(correct_baby = ifelse(baby == returned_babies,
                                   TRUE,
                                   FALSE)) |>
      summarise(n_correct_babies = sum(correct_baby)) |> 
      pull(n_correct_babies)
    
    return(correct_returns)
    
}

results <- map_int(.x = 1:10000,
                   .f = ~randomBabies(4)
                   )
```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2
#Lab 9 Question 6
all_simulations <- grid |> 
  mutate(simulated_means = pmap(.l = list(n = n, df = df), 
                                .f = simulate_means)
         ) |> 
  unnest(simulated_means) 
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1
#Lab 3 Question 7
#Group together teacher-course columns
teacher_evals_clean |>
  group_by(teacher_id,
           course_id) |>
  # Summing up all of the NAs across variables
  summarize(
    across(.cols = question_no:sex,
           .fns = ~ sum(is.na(.x))
           ), .groups = "drop"
  ) |>
  # Filtering out all of the NAs
  filter(
    if_any(.cols = question_no:sex,
           .fns = ~ .x != 0)
  )
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2
#Lab 4 Question 6 (Edit: Changed the color palette of my plot)
colors <- colorRampPalette(brewer.pal(8, "Accent"))(10)

ca_childcare |>
  filter(study_year >= 2008) |>
  pivot_longer(cols = c(mc_infant,
                        mc_toddler,
                        mc_preschool),
               names_to = "age_demo",
               values_to = "median_weekly_price") |>
  mutate(age_demo = fct_recode(age_demo,
                               "Infant" = "mc_infant",
                               "Toddler" = "mc_toddler",
                               "Preschool" = "mc_preschool"),
         age_demo = fct_relevel(age_demo,
                                 "Infant",
                                 "Toddler",
                                 "Preschool")
         ) |> 
ggplot(mapping = aes (x = study_year,
                        y = median_weekly_price,
                      color = fct_reorder2(.f = region,
                                           .x = study_year,
                                           .y = median_weekly_price))) +
  geom_point() +
  geom_smooth(method = "loess",
              se = TRUE) +
  facet_wrap(~age_demo) +
  labs(x = "Study Year",
       y = "",
       title = "Weekly Median Price for Center-Based Childcare ($)",
       color = "California Region") +
  scale_color_manual(values = colors) + 
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  guides(x = guide_axis(n.dodge = 2)) +
  theme_bw() +
  scale_y_continuous(limits = c(0,
                                500),
                     labels = scales::label_dollar())
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1
#Lab 9 Question 1 (Edit: Changed the randomBabies function argument from .x to 4 instead because we want to simulate the 4 babies that are correctly returned within the 10,000 simulations).
randomBabies <- function(nBabies = 4){
  baby_data <- tibble(baby = 1:nBabies,
                      returned_babies = sample (1:nBabies,
                                                size = nBabies,
                                                replace = FALSE)
                      )
    correct_returns <- baby_data |>
      mutate(correct_baby = ifelse(baby == returned_babies,
                                   TRUE,
                                   FALSE)) |>
      summarise(n_correct_babies = sum(correct_baby)) |> 
      pull(n_correct_babies)
    
    return(correct_returns)
    
}

results <- map_int(.x = 1:10000,
                   .f = ~randomBabies(4)
                   )
```

-   Example 2

```{r}
#| label: dsm-1-2
#Lab 9 Question 4

simulate_means <- function(n, df){
  map_dbl(.x = seq_len(n),  #seq_len() creates a sequence from 1 to n.
          .f = ~rchisq(n = 100, df = df) %>% mean()
          )
}
```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1
#Lab 2 Question 17
species_mod <- aov(weight ~ species, data = surveys)

summary(species_mod)
```

-   Example 2

```{r}
#| label: dsm-2-2
#Challenge 3 Chi-Square Test
# Contingency table for sen_level and SET_level
contingency_table <- table(teacher_evals_compare$sen_level, teacher_evals_compare$SET_level)
#chi-square test
chisq.test(contingency_table)
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

**In order to revise my thinking, I first had to read through ALL the provided feedback and figure out how to incorporate it into my edits. I referred to past lecture slides and package cheat sheets to find ways to improve the efficiency and tidiness of my code. Now, my code examples demonstrate my revised thinking, as shown by my code comments. I have submitted revisions for every question that I have gotten a growing on and I have even revised some of my code that was given a success, like challenge 2 exploring annotations. My revisions have helped me implement efficienct practices when coding.**

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

**The revisions are described at the top of each code chunk as code comments. They appear as "(Edit: ...)".**

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

**I have extended my thinking by attempting challenges beyond the minimum requirements. Although some of the questions could have been solved more efficiently, the fact that I pushed myself to learn complicated skills is proof of me proactively extending my thinking. All the code that have edit comments are more proof of extending my thinking as I was actively implementing the feedback from both Dr. T and peers to further improve my code.**

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

**My lab 9 peer review: Great job on writing tidy and efficient code! I really appreciate your use if named arguments as this really improves the readability and reproducibility of your code. Both your table and plot were easy to interpret as well. I would like to suggest that you consider implementing some function checks for number 1. Also, for number 3 I recommend you change your title to something more informative like “Proportion of Babies Correctly Returned in 10,000 Simulations.” This way you don’t need a subtitle, and your title is less repetitive. Great job overall!**

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

**I believe that I have grown as a collaborator by making a conscious effort to be open to new/different ideas that allow both my partner and I to extend our thinking. Throughout the practice activities, I have noticed that following the designated coder/developer roles has been pretty difficult, but despite these difficulties we do put in the effort to follow the roles. As a result, we have been able to both individually demonstrate our strengths in the practice activities. Overall, becoming a more collaborative group member has changed my prospective of collaborative projects toward a more positive manner.**
